{"version":3,"sources":["views/dashboard/screener/dailyAndweeklyReports/Weeklyscreener.js"],"names":["dateFilterParams","comparator","filterLocalDateAtMidnight","cellValue","dateParts","split","cellDate","Date","Number","getTime","browserDatePicker","WeeklyScreenerSevika","gridRef","useRef","useState","gridApi","setGridApi","startDate","setStartDate","endDate","setEndDate","rowData","setUsers","columns","minWidth","headerName","field","filter","filterParams","onBtnExport","useCallback","current","api","exportDataAsCsv","useEffect","alert","getFilterInstance","setModel","type","dateFrom","dateTo","onFilterChanged","axios","post","then","response","console","log","data","status","recs","className","style","height","value","onChange","e","target","variant","startIcon","onClick","ref","suppressExcelExport","columnDefs","defaultColDef","flex","onGridReady","params","pagination"],"mappings":"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","file":"static/js/39.45c57e0a.chunk.js","sourcesContent":["// import logo from './logo.svg';\r\nimport \"../../screener/App.css\";\r\nimport React,{ useCallback,useEffect, useMemo, useRef, useState } from \"react\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\r\nimport Button from '@mui/material/Button';\r\nimport ArrowDownwardIcon from '@mui/icons-material/ArrowDownward';\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\n// import 'ag-grid-community/dist/styles/ag-theme-alpine.css';\r\nconst dateFilterParams = {\r\n  comparator: function (filterLocalDateAtMidnight, cellValue) {\r\n    var dateAsString = cellValue;\r\n    if (dateAsString == null) return -1;\r\n    var dateParts = dateAsString.split(\"-\");\r\n    var cellDate = new Date(\r\n      Number(dateParts[2]),\r\n      Number(dateParts[1]) - 1,\r\n      Number(dateParts[0])\r\n    );\r\n    if (filterLocalDateAtMidnight.getTime() === cellDate.getTime()) {\r\n      return 0;\r\n    }\r\n    if (cellDate < filterLocalDateAtMidnight) {\r\n      return -1;\r\n    }\r\n    if (cellDate > filterLocalDateAtMidnight) {\r\n      return 1;\r\n    }\r\n  },\r\n  browserDatePicker: true,\r\n};\r\nvar screenerFilterParams = {\r\n  filterOptions: ['contains', 'notContains'],\r\n  textFormatter: (r) => {\r\n    if (r == null) return null;\r\n    return r\r\n      .toLowerCase()\r\n      .replace(/[àáâãäå]/g, 'a')\r\n      .replace(/æ/g, 'ae')\r\n      .replace(/ç/g, 'c')\r\n      .replace(/[èéêë]/g, 'e')\r\n      .replace(/[ìíîï]/g, 'i')\r\n      .replace(/ñ/g, 'n')\r\n      .replace(/[òóôõö]/g, 'o')\r\n      .replace(/œ/g, 'oe')\r\n      .replace(/[ùúûü]/g, 'u')\r\n      .replace(/[ýÿ]/g, 'y');\r\n  },\r\n  debounceMs: 200,\r\n  suppressAndOrCondition: true,\r\n};\r\n// http://159.65.148.197:3001/api/generalsurvey/screeningScreener\r\nfunction WeeklyScreenerSevika() {\r\n  const gridRef = useRef();\r\n  const [gridApi, setGridApi] = useState();\r\n  const [startDate, setStartDate] = useState(\"\");\r\n  const [endDate, setEndDate] = useState(\"\");\r\n  const [rowData, setUsers] = useState(\"\");\r\n\r\n  const columns = [\r\n    {minWidth : 100, headerName: \"citizenId\", field: \"citizenId\" ,filter: true },\r\n    {minWidth : 100, headerName: \"screenerId\", field: \"screenerId\",filter: true },\r\n    { minWidth : 100, headerName: \"caseId\", field: \"caseId\",filter: true },\r\n    { minWidth : 100, headerName: \"height\", field: \"height\", filter:true },\r\n    {  minWidth : 130, headerName: 'Citizen Name', field: 'fullname',filter: true },\r\n    {  minWidth : 130, headerName: 'Sanyojika Name', field: 'screenerfullname',filter: true },\r\n    { minWidth : 100, headerName: 'DOB', field: 'DOB',filter: true },\r\n    {  minWidth : 100, headerName: 'Gender',field: 'Gender',filter: true},\r\n    {  minWidth : 100, headerName: 'Age', field: 'Age',filter: true  },\r\n    {  minWidth : 100, headerName: 'Aadhar number', field: 'aadhaar',filter: true  },\r\n    {  minWidth : 100, headerName: 'Mobile number', field: 'Mobile',filter: true  },\r\n    {  minWidth : 100, headerName: 'Address', field: 'address',filter: true  },\r\n    { minWidth : 100, headerName: 'weight', field: 'weight'  },\r\n    {  minWidth : 100, headerName: 'bmi', field: 'bmi' },\r\n    {  minWidth : 100, headerName: 'bpsys', field: 'bpsys'  },\r\n    {  minWidth : 100, headerName: 'bpdia', field: 'bpdia' },\r\n    {  minWidth : 100, headerName: 'spo2', field: 'spo2' },\r\n    {  minWidth : 100, headerName: 'pulse', field: 'pulse' },\r\n    {  minWidth : 100, headerName: 'temperature', field: 'temperature'},\r\n    {  minWidth : 100, headerName: 'Arm', field: 'arm'  },\r\n    // {  minWidth : 100, headerName: 'Left Eye Range', field: 'leye'  },\r\n    // {  minWidth : 100, headerName: 'Right Eye Range', field: 'reye'  },\r\n    // {  minWidth : 100, headerName: 'hemoglobins', field: 'hemoglobins' , filter: true}, \r\n    // {  minWidth : 100, headerName: 'Blood Glucose unit', field: 'unit'  },\r\n    // {  minWidth : 100, headerName: 'Blood Glucose type', field: 'type'  },\r\n    // {  minWidth : 100, headerName: 'leukocytes', field: 'leukocytes'  },\r\n    // {  minWidth : 100, headerName: 'nitrite', field: 'nitrite'  },\r\n    // {  minWidth : 100, headerName: 'urobilinogen', field: 'urobilinogen'  },\r\n    // {  minWidth : 100, headerName: 'protein', field: 'protein'  },\r\n    // {  minWidth : 100, headerName: 'Blood', field: 'blood'  },\r\n    // {  minWidth : 100, headerName: 'specific Gravity', field: 'specificGravity'  },\r\n    // {  minWidth : 100, headerName: 'ketone', field: 'ketone'  },\r\n    // {  minWidth : 100, headerName: 'bilirubin', field: 'bilirubin'  },\r\n    // {  minWidth : 100, headerName: 'FVC Predicted', field: 'fvc_predicted'  },\r\n    // {  minWidth : 100, headerName: 'FVC Actual', field: 'fvc_actual'  },\r\n    // {  minWidth : 100, headerName: 'FVC Predicted Percent', field: 'fvc_predicted_percent'  },\r\n    // {  minWidth : 100, headerName: 'FEV Predicted', field: 'fev1_predicted'  },\r\n    // {  minWidth : 100, headerName: 'FEV1 Actual', field: 'fev1_actual'  },\r\n    // {  minWidth : 100, headerName: 'FEV1 Predicted Percent', field: 'fev1_predicted_percent'  },\r\n    // {  minWidth : 100, headerName: 'PEF Predicted', field: 'pef_predicted'  },\r\n    // {  minWidth : 100, headerName: 'PEF Predicted Percent', field: 'pef_predicted_percent'  },\r\n    // {  minWidth : 100, headerName: 'FVC1 Predicted', field: 'fvc1_predicted'  },\r\n    // {  minWidth : 100, headerName: 'FVC1 Actual', field: 'fvc1_actual'  },\r\n    // {  minWidth : 100, headerName: 'FVC1 Predicted Percent', field: 'fvc1_predicted_percent'  },\r\n    // {  minWidth : 100, headerName: 'cholesterol', field: 'cholesterol'  },\r\n    // {  minWidth : 100, headerName: 'hdlcholesterol', field: 'hdlcholesterol'  },\r\n    // {  minWidth : 100, headerName: 'triglycerides', field: 'triglycerides'  },\r\n    // {  minWidth : 100, headerName: 'ldl', field: 'ldl'  },\r\n    // {  minWidth : 100, headerName: 'tcl_hdl', field: 'tcl_hdl'  },\r\n    // {  minWidth : 100, headerName: 'ldl_hdl', field: 'ldl_hdl'  },\r\n    // {  minWidth : 100, headerName: 'non_hdl', field: 'non_hdl'  },\r\n    // {  minWidth : 100, headerName: 'glucose', field: 'glucose'  },\r\n    // {  minWidth : 100, headerName: 'type', field: 'type' ,filter: true },\r\n    {\r\n      minWidth : 100, headerName: \"Date\",\r\n       field: \"createdAt\",\r\n      filter: \"agDateColumnFilter\",\r\n      filterParams: dateFilterParams,\r\n    },\r\n  ];\r\n  const defColumnDefs = { flex: 1 };\r\n\r\n  const onGridReady = (params) => {\r\n    setGridApi(params);\r\n  };\r\n  const onBtnExport = useCallback(() => {\r\n    gridRef.current.api.exportDataAsCsv();\r\n  }, []);\r\n  const getFilterType = () => {\r\n    if (startDate !== \"\" && endDate !== \"\") return \"inRange\";\r\n    else if (startDate !== \"\") return \"greaterThan\";\r\n    else if (endDate !== \"\") return \"lessThan\";\r\n  };\r\n  useEffect(() => {\r\n    if (gridApi) {\r\n      if (startDate !== \"\" && endDate !== \"\" && startDate > endDate) {\r\n        alert(\"Start Date should be before End Date\");\r\n        setEndDate(\"\");\r\n      } else {\r\n        var dateFilterComponent = gridApi.api.getFilterInstance(\"createdAt\");\r\n        dateFilterComponent.setModel({\r\n          type: getFilterType(),\r\n          dateFrom: startDate ? startDate : endDate,\r\n          dateTo: endDate,\r\n        });\r\n        gridApi.api.onFilterChanged();\r\n      }\r\n    }\r\n  }, [startDate, endDate]);\r\n\r\n  axios\r\n    .post(\"http://159.65.148.197:3001/api/generalsurvey/screeningScreener\")\r\n    .then((response) => {\r\n      console.log(\"Returned data:\");\r\n      if (response.data.status === 1) {\r\n        var recs = response.data.data.data;\r\n        setUsers(recs);\r\n      }\r\n    }, []);\r\n  return (\r\n    <div className=\"App\">\r\n      {/* <h2 align=\"center\">Ag Grid with React</h2> */}\r\n      {/* <p align=\"center\">Date Range Filtering </p> */}\r\n      <div className=\"ag-theme-alpine \" style={{ height: 400 }}>\r\n     \r\n        <div className=\"row d-flex justify-content-end align-items-center\">\r\n          <div className=\"col-sm-6 pb-1\">\r\n            <div className=\"row\">\r\n              <div className=\"col-sm-6\">\r\n             <label className=\"d-flex\"> From :</label>\r\n               <input\r\n          // style={{ width: 100 }}\r\n            type=\"date\"\r\n            className=\"form-control\"\r\n            value={startDate}\r\n            onChange={(e) => setStartDate(e.target.value)}\r\n          />\r\n              </div>\r\n              <div className=\"col-sm-6\">\r\n             <label className=\"d-flex\"> To :</label>\r\n              <input\r\n            // style={{ width: 100 }}\r\n            type=\"date\"\r\n            className=\"form-control\"\r\n            value={endDate}\r\n            onChange={(e) => setEndDate(e.target.value)}\r\n          />\r\n              </div>\r\n            </div>\r\n          </div>\r\n         <div className=\"col-sm-2\">\r\n         <Button variant=\"outlined\" startIcon={<ArrowDownwardIcon />} onClick={onBtnExport}>\r\n        Export\r\n      </Button>\r\n         </div>\r\n           \r\n         \r\n        </div>\r\n       sevika\r\n        \r\n        <AgGridReact\r\n        className=\"pt-5\"\r\n            ref={gridRef}\r\n          rowData={rowData}\r\n          suppressExcelExport={true}\r\n          columnDefs={columns}\r\n          defaultColDef={defColumnDefs}\r\n          onGridReady={onGridReady}\r\n          pagination={true}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WeeklyScreenerSevika;\r\n"],"sourceRoot":""}