{"version":3,"sources":["views/dashboard/screener/dailyAndweeklyReports/LipidCritical.js"],"names":["CustomToolbar","printOptions","disableToolbarButton","LipidCritical","useState","rows","setUsers","useEffect","axios","post","then","response","console","log","data","status","recs","columns","field","headerName","width","sortable","renderCell","params","className","style","height","pageSize","components","Toolbar","getRowId","_id"],"mappings":"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","file":"static/js/82.5e0d6154.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\n// import { environment } from '../../api'\r\nimport '@mui/x-data-grid-generator'\r\nimport { DataGrid, GridToolbar,GridToolbarContainer,GridFilterPanel,GridToolbarExport,GridToolbarFilterButton } from '@mui/x-data-grid'\r\nimport axios from \"axios\";\r\nfunction CustomToolbar() {\r\n  return (\r\n    <GridToolbarContainer>\r\n      <GridToolbarExport printOptions={{ disableToolbarButton: true }} />\r\n      {/* <GridFilterPanel /> */}\r\n      <GridToolbarFilterButton />\r\n    </GridToolbarContainer>\r\n  );\r\n}\r\n\r\nfunction LipidCritical() {\r\n  const [rows, setUsers] = useState([])\r\n  useEffect(() => {\r\n\t\t  axios.post('http://159.65.148.197:3001/api/screening/lipidCritical')\r\n\t\t .then(response => {\r\n\t\t\t\t\tconsole.log(\"Returned data:\");\r\n\t\t\t\t\tif(response.data.status===1)\r\n\t\t\t\t\t  {\r\n\t\t\t\t\t\t  var recs=response.data.data.data;\r\n\t\t\t\t\t\t  setUsers(recs);\r\n\t\t\t\t\t  }\r\n\t\t },[]);\r\n })\r\n\r\n  const columns = [\r\n    { field: 'citizenId', headerName: 'citizenId', width: 150 },\r\n    { field: 'createdAt', headerName: 'Created At', width: 150 },\r\n    { field: 'fullname', headerName: 'Citizen Name', width: 120},\r\n    { field: 'DOB', headerName: 'DOB', width: 120 },\r\n    { field: 'Gender', headerName: 'Gender', width: 100},\r\n    { field: 'ScreenerId', headerName: 'ScreenerId', width: 80 },\r\n     { field: 'issubscreenertype', headerName: 'Role', width: 120 },\r\n     {\r\n      field: 'Screenerfullname',\r\n      headerName: 'Screener Name',\r\n      sortable: false,\r\n      width: 100,\r\n      renderCell: (params) => {\r\n        const onClick = (e) => {\r\n          e.stopPropagation() // don't select this row after clicking\r\n\r\n          const api = params.api\r\n          const thisRow = {}\r\n          api\r\n            .getAllColumns()\r\n            .filter((c) => c.field !== '__check__' && !!c)\r\n            .forEach(\r\n              (c) => (thisRow[c.field] = params.getValue(params.id, c.field)),\r\n            )\r\n\r\n          return alert(JSON.stringify(thisRow, null, 4))\r\n        }\r\n      \r\n      },\r\n    },\r\n    { field: 'caseId', headerName: 'caseId', width: 120 },\r\n    { field: 'Age', headerName: 'Age', width: 120 },\r\n    { field: 'height', headerName: 'height', width: 120 },\r\n    { field: 'weight', headerName: 'weight', width: 120 },\r\n    { field: 'bmi', headerName: 'bmi', width: 120 },\r\n    { field: 'bpsys', headerName: 'bpsys', width: 120 },\r\n    { field: 'bpdia', headerName: 'bpdia', width: 120 },\r\n    { field: 'spo2', headerName: 'spo2', width: 120 },\r\n    { field: 'pulse', headerName: 'pulse', width: 120 },\r\n    { field: 'temperature', headerName: 'temperature', width: 120 },\r\n    { field: 'arm', headerName: 'Arm', width: 120 },\r\n    { field: 'leye', headerName: 'Left Eye Range', width: 120 },\r\n    { field: 'reye', headerName: 'Right Eye Range', width: 120 },\r\n    { field: 'hemoglobins', headerName: 'hemoglobins', width: 120 },\r\n    { field: 'unit', headerName: 'Blood Glucose unit', width: 120 },\r\n    { field: 'type', headerName: 'Blood Glucose type', width: 120 },\r\n    { field: 'leukocytes', headerName: 'Blood Glucose type', width: 120 },\r\n    { field: 'nitrite', headerName: 'nitrite', width: 120 },\r\n    { field: 'urobilinogen', headerName: 'urobilinogen', width: 120 },\r\n    { field: 'protein', headerName: 'protein', width: 120 },\r\n    { field: 'blood', headerName: 'blood', width: 120 },\r\n    { field: 'specificGravity', headerName: 'specificGravity', width: 120 },\r\n    { field: 'ketone', headerName: 'ketone', width: 120 },\r\n    { field: 'bilirubin', headerName: 'bilirubin', width: 120 },\r\n    { field: 'glucose', headerName: 'glucose', width: 120 },\r\n    { field: 'fvc_predicted', headerName: 'FVC Predicted', width: 120 },\r\n    { field: 'fvc_actual', headerName: 'FVC Actual', width: 120 },\r\n    { field: 'fvc_predicted_percent', headerName: 'FVC Predicted Percent', width: 120 },\r\n    { field: 'fev1_predicted', headerName: ' FEV Predicted', width: 120 },\r\n    { field: 'fev1_actual', headerName: 'FEV1 Actual', width: 120 },\r\n    { field: 'fev1_predicted_percent', headerName: ' FEV1 Predicted Percent', width: 120 },\r\n    { field: 'pef_predicted', headerName: 'PEF Predicted', width: 120 },\r\n    { field: 'pef_actual', headerName: 'PEF Actual', width: 120 },\r\n    { field: 'pef_predicted_percent', headerName: 'PEF Predicted Percent', width: 120 },\r\n    { field: 'fvc1_predicted', headerName: 'FVC1 Predicted', width: 120 },\r\n    { field: 'fvc1_actual', headerName: 'FVC1 Actual', width: 120 },\r\n    { field: 'fvc1_predicted_percent', headerName: 'FVC1 Predicted Percent', width: 120 },\r\n    { field: 'cholesterol', headerName: 'Cholesterol', width: 120 },\r\n    { field: 'hdlcholesterol', headerName: 'HdlCholesterol', width: 120 },\r\n    { field: 'triglycerides', headerName: 'Triglycerides', width: 120 },\r\n    { field: 'ldl', headerName: 'ldl', width: 120 },\r\n    { field: 'tcl_hdl', headerName: 'tcl hdl', width: 120 },\r\n    { field: 'ldl_hdl', headerName: 'ldl hdl', width: 120 },\r\n    { field: 'non_hdl', headerName: 'non_hdl', width: 120 },\r\n    { field: 'glucose', headerName: 'glucose hdl', width: 120 },\r\n    { field: 'type', headerName: 'type', width: 120 },\r\n   \r\n\r\n  \r\n  ]\r\n\r\n  return (\r\n    <>\r\n    <div className=\"bannermain\">\r\n      <div className=\"container\">\r\n        <h2 className=\"font-24-31 font-20-26 font-style-normal font-weight-600 colorformhrading titlewadd\">\r\n        Lipid Critical Report\r\n        </h2>\r\n        <div style={{ height: '75vh', width: '100%' }}>\r\n         \r\n          <DataGrid\r\n            className=\"pb-3\"\r\n            rows={rows}\r\n            columns={columns}\r\n            pageSize={8}\r\n            components={{\r\n              Toolbar: CustomToolbar,\r\n            }}\r\n            getRowId={(rows) => rows._id}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </>\r\n  )\r\n}\r\n\r\nexport default LipidCritical"],"sourceRoot":""}