{"version":3,"sources":["components/reactstrap/collapse/CollapseSourceCode.js","components/reactstrap/collapse/Accordion.js","../node_modules/reactstrap/es/Collapse.js"],"names":["accordion","className","collapseItems","id","title","content","Accordion","state","activeTab","collapseID","status","toggleTab","tab","setState","toggleCollapse","prevState","onEntered","onEntering","onExited","onExiting","accordionItems","map","collapseItem","Card","key","onClick","classnames","closing","opening","CardHeader","CardTitle","size","Collapse","isOpen","CardBody","Fragment","Nav","tabs","NavItem","NavLink","active","this","TabContent","TabPane","tabId","React","Component","_transitionStatusToCl","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","propTypes","Transition","PropTypes","bool","children","oneOfType","arrayOf","node","tag","tagPropType","navbar","cssModule","innerRef","func","string","defaultProps","appear","enter","exit","timeout","TransitionTimeouts","transitionStatusToClassHash","TransitionStatuses","ENTERING","ENTERED","EXITING","EXITED","getHeight","scrollHeight","_Component","props","_this","call","height","name","bind","_assertThisInitialized","_inheritsLoose","_proto","prototype","isAppearing","onExit","offsetHeight","render","_this2","_this$props","Tag","otherProps","_objectWithoutPropertiesLoose","transitionProps","pick","TransitionPropTypeKeys","childProps","omit","createElement","_extends","in","collapseClass","getTransitionClass","classes","mapToCssModules","classNames","style","ref"],"mappings":"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","file":"static/js/40.f630c7de.chunk.js","sourcesContent":["import React from \"react\"\n\nexport const accordion = (\n  <pre>\n    <code className=\"language-jsx\">\n      {`\nimport React from \"react\"\nimport {Collapse} from \"reactstrap\"\n\nconst collapseItems = [\n  {\n    id: 1,\n    title: \"Accordion Item 1\",\n    content:\n      \"Pie dragée muffin. Donut cake liquorice marzipan carrot cake topping powder candy. Sugar plum brownie brownie cotton candy.\"\n  },\n  {\n    id: 2,\n    title: \"Accordion Item 2\",\n    content:\n      \"Jelly-o brownie marshmallow soufflé I love jelly beans oat cake. I love gummies chocolate bar marshmallow sugar plum.\"\n  },\n  {\n    id: 3,\n    title: \"Accordion Item 3\",\n    content:\n      \"Pudding lollipop dessert chocolate gingerbread. Cake cupcake bonbon cupcake marshmallow. Gummi bears carrot cake bonbon cake.\"\n  },\n  {\n    id: 4,\n    title: \"Accordion Item 4\",\n    content:\n      \"Brownie sweet carrot cake dragée caramels fruitcake. Gummi bears tootsie roll croissant gingerbread dragée tootsie roll.\"\n  }\n]\n\nclass Accordion extends React.Component {\n\n  state = { collapseID: \"\"}\n\n  toggleCollapse = collapseID => {\n      this.setState(prevState => ({\n        collapseID: prevState.collapseID !== collapseID ? collapseID : \"\"\n      }))\n    }\n\n\n  render() {\n\n      const accordionItems = collapseItems.map(collapseItem => {\n          return (\n            <Card\n              key={collapseItem.id}\n              onClick={() => this.toggleCollapse(collapseItem.id)}\n            >\n              <CardHeader>\n                <CardTitle className=\"lead collapse-title collapsed\">\n                  {collapseItem.title}\n                </CardTitle>\n              </CardHeader>\n              <Collapse\n                isOpen={collapseItem.id === this.state.collapseID}\n                onEntering={this.onEntering}\n                onEntered={this.onEntered}\n                onExiting={this.onExiting}\n                onExited={this.onExited}\n              >\n                <CardBody>{collapseItem.content}</CardBody>\n              </Collapse>\n            </Card>\n          )\n        })\n\n    return(\n      <div className=\"collapse-bordered vx-collapse collapse-icon accordion-icon-rotate\">\n      {accordionItems}\n    </div>\n    )\n  }\n}\nexport default Accordion`}\n    </code>\n  </pre>\n)\n\nexport const accordionShadow = (\n  <pre>\n    <code className=\"language-jsx\">\n      {`\nimport React from \"react\"\nimport {Collapse} from \"reactstrap\"\nimport classnames from \"classnames\"\n\nconst collapseItems = [\n  {\n    id: 1,\n    title: \"Accordion Item 1\",\n    content:\n      \"Pie dragée muffin. Donut cake liquorice marzipan carrot cake topping powder candy. Sugar plum brownie brownie cotton candy.\"\n  },\n  {\n    id: 2,\n    title: \"Accordion Item 2\",\n    content:\n      \"Jelly-o brownie marshmallow soufflé I love jelly beans oat cake. I love gummies chocolate bar marshmallow sugar plum.\"\n  },\n  {\n    id: 3,\n    title: \"Accordion Item 3\",\n    content:\n      \"Pudding lollipop dessert chocolate gingerbread. Cake cupcake bonbon cupcake marshmallow. Gummi bears carrot cake bonbon cake.\"\n  },\n  {\n    id: 4,\n    title: \"Accordion Item 4\",\n    content:\n      \"Brownie sweet carrot cake dragée caramels fruitcake. Gummi bears tootsie roll croissant gingerbread dragée tootsie roll.\"\n  }\n]\n\nclass AccordionShadow extends React.Component {\n\n  state = { collapseID: \"\"}\n\n  toggleCollapse = collapseID => {\n      this.setState(prevState => ({\n        collapseID: prevState.collapseID !== collapseID ? collapseID : \"\"\n      }))\n    }\n\n\n  render() {\n\n      const accordionShadowItems = collapseItems.map(collapseItem => {\n          return (\n            <Card\n              className={classnames({\n                open: collapseItem.id === this.state.collapseID\n              })}\n              key={collapseItem.id}\n              onClick={() => this.toggleCollapse(collapseItem.id)}\n            >\n              <CardHeader>\n                <CardTitle className=\"lead collapse-title collapsed\">\n                  {collapseItem.title}\n                </CardTitle>\n              </CardHeader>\n              <Collapse\n                isOpen={collapseItem.id === this.state.collapseID}\n                onEntering={this.onEntering}\n                onEntered={this.onEntered}\n                onExiting={this.onExiting}\n                onExited={this.onExited}\n              >\n                <CardBody>{collapseItem.content}</CardBody>\n              </Collapse>\n            </Card>\n          )\n        })\n\n    return(\n      <div className=\"collapse-bordered vx-collapse collapse-icon accordion-icon-rotate accordion-shadow\">\n      {accordionShadowItems}\n    </div>\n    )\n  }\n}\nexport default AccordionShadow`}\n    </code>\n  </pre>\n)\n\nexport const accordionBorder = (\n  <pre>\n    <code className=\"language-jsx\">\n      {`\nimport React from \"react\"\nimport {Collapse} from \"reactstrap\"\n\nconst collapseItems = [\n  {\n    id: 1,\n    title: \"Accordion Item 1\",\n    content:\n      \"Pie dragée muffin. Donut cake liquorice marzipan carrot cake topping powder candy. Sugar plum brownie brownie cotton candy.\"\n  },\n  {\n    id: 2,\n    title: \"Accordion Item 2\",\n    content:\n      \"Jelly-o brownie marshmallow soufflé I love jelly beans oat cake. I love gummies chocolate bar marshmallow sugar plum.\"\n  },\n  {\n    id: 3,\n    title: \"Accordion Item 3\",\n    content:\n      \"Pudding lollipop dessert chocolate gingerbread. Cake cupcake bonbon cupcake marshmallow. Gummi bears carrot cake bonbon cake.\"\n  },\n  {\n    id: 4,\n    title: \"Accordion Item 4\",\n    content:\n      \"Brownie sweet carrot cake dragée caramels fruitcake. Gummi bears tootsie roll croissant gingerbread dragée tootsie roll.\"\n  }\n]\n\nclass AccordionBorder extends React.Component {\n\n  state = { collapseID: \"\"}\n\n  toggleCollapse = collapseID => {\n      this.setState(prevState => ({\n        collapseID: prevState.collapseID !== collapseID ? collapseID : \"\"\n      }))\n    }\n\n\n  render() {\n\n      const accordionBorderItems = collapseItems.map(collapseItem => {\n          return (\n            <Card\n              className=\"collapse-border-item\"\n              key={collapseItem.id}\n              onClick={() => this.toggleCollapse(collapseItem.id)}\n            >\n              <CardHeader>\n                <CardTitle className=\"lead collapse-title collapsed\">\n                  {collapseItem.title}\n                </CardTitle>\n              </CardHeader>\n              <Collapse\n                isOpen={collapseItem.id === this.state.collapseID}\n                onEntering={this.onEntering}\n                onEntered={this.onEntered}\n                onExiting={this.onExiting}\n                onExited={this.onExited}\n              >\n                <CardBody>{collapseItem.content}</CardBody>\n              </Collapse>\n            </Card>\n          )\n        })\n\n    return(\n      <div className=\"collapse-bordered vx-collapse collapse-icon accordion-icon-rotate collapse-border\">\n      {accordionBorderItems}\n    </div>\n    )\n  }\n}\nexport default AccordionBorder`}\n    </code>\n  </pre>\n)\n\nexport const accordionMargin = (\n  <pre>\n    <code className=\"language-jsx\">\n      {`\nimport React from \"react\"\nimport {Collapse} from \"reactstrap\"\n\nconst collapseItems = [\n  {\n    id: 1,\n    title: \"Accordion Item 1\",\n    content:\n      \"Pie dragée muffin. Donut cake liquorice marzipan carrot cake topping powder candy. Sugar plum brownie brownie cotton candy.\"\n  },\n  {\n    id: 2,\n    title: \"Accordion Item 2\",\n    content:\n      \"Jelly-o brownie marshmallow soufflé I love jelly beans oat cake. I love gummies chocolate bar marshmallow sugar plum.\"\n  },\n  {\n    id: 3,\n    title: \"Accordion Item 3\",\n    content:\n      \"Pudding lollipop dessert chocolate gingerbread. Cake cupcake bonbon cupcake marshmallow. Gummi bears carrot cake bonbon cake.\"\n  },\n  {\n    id: 4,\n    title: \"Accordion Item 4\",\n    content:\n      \"Brownie sweet carrot cake dragée caramels fruitcake. Gummi bears tootsie roll croissant gingerbread dragée tootsie roll.\"\n  }\n]\n\nclass AccordionMargin extends React.Component {\n\n  state = { collapseID: \"\"}\n\n  toggleCollapse = collapseID => {\n      this.setState(prevState => ({\n        collapseID: prevState.collapseID !== collapseID ? collapseID : \"\"\n      }))\n    }\n\n\n  render() {\n\n      const accordionMarginItems = collapseItems.map(collapseItem => {\n          return (\n            <Card\n              key={collapseItem.id}\n              onClick={() => this.toggleCollapse(collapseItem.id)}\n            >\n              <CardHeader>\n                <CardTitle className=\"lead collapse-title collapsed\">\n                  {collapseItem.title}\n                </CardTitle>\n              </CardHeader>\n              <Collapse\n                isOpen={collapseItem.id === this.state.collapseID}\n                onEntering={this.onEntering}\n                onEntered={this.onEntered}\n                onExiting={this.onExiting}\n                onExited={this.onExited}\n              >\n                <CardBody>{collapseItem.content}</CardBody>\n              </Collapse>\n            </Card>\n          )\n        })\n\n    return(\n      <div className=\"vx-collapse collapse-icon accordion-icon-rotate\">\n      {accordionMarginItems}\n    </div>\n    )\n  }\n}\nexport default AccordionMargin`}\n    </code>\n  </pre>\n)\n\nexport const accordionHover = (\n  <pre>\n    <code className=\"language-jsx\">\n      {`\nimport React from \"react\"\nimport {Collapse} from \"reactstrap\"\n\nconst collapseItems = [\n  {\n    id: 1,\n    title: \"Accordion Item 1\",\n    content:\n      \"Pie dragée muffin. Donut cake liquorice marzipan carrot cake topping powder candy. Sugar plum brownie brownie cotton candy.\"\n  },\n  {\n    id: 2,\n    title: \"Accordion Item 2\",\n    content:\n      \"Jelly-o brownie marshmallow soufflé I love jelly beans oat cake. I love gummies chocolate bar marshmallow sugar plum.\"\n  },\n  {\n    id: 3,\n    title: \"Accordion Item 3\",\n    content:\n      \"Pudding lollipop dessert chocolate gingerbread. Cake cupcake bonbon cupcake marshmallow. Gummi bears carrot cake bonbon cake.\"\n  },\n  {\n    id: 4,\n    title: \"Accordion Item 4\",\n    content:\n      \"Brownie sweet carrot cake dragée caramels fruitcake. Gummi bears tootsie roll croissant gingerbread dragée tootsie roll.\"\n  }\n]\n\nclass AccordionHover extends React.Component {\n\n  state = { collapseID: \"\"}\n\n  toggleCollapse = collapseID => {\n      this.setState(prevState => ({\n        collapseID: prevState.collapseID !== collapseID ? collapseID : \"\"\n      }))\n    }\n\n\n  render() {\n\n      const accordionHoverItems = collapseItems.map(collapseItem => {\n          return (\n            <Card\n              key={collapseItem.id}\n              onClick={() => this.toggleCollapse(collapseItem.id)}\n            >\n              <CardHeader>\n                <CardTitle className=\"lead collapse-title collapsed\">\n                  {collapseItem.title}\n                </CardTitle>\n              </CardHeader>\n              <Collapse\n                isOpen={collapseItem.id === this.state.collapseID}\n                onEntering={this.onEntering}\n                onEntered={this.onEntered}\n                onExiting={this.onExiting}\n                onExited={this.onExited}\n              >\n                <CardBody>{collapseItem.content}</CardBody>\n              </Collapse>\n            </Card>\n          )\n        })\n\n    return(\n      <div className=\"vx-collapse collapse-icon accordion-icon-rotate\">\n      {accordionHoverItems}\n    </div>\n    )\n  }\n}\nexport default AccordionHover\n  `}\n    </code>\n  </pre>\n)\n\nexport const collapseUncontrolled = (\n  <pre>\n    <code className=\"language-jsx\">\n      {`\nimport React from \"react\"\nimport {UncontrolledCollaspe} from \"reactstrap\"\n\nclass CollapseUncontrolled extends React.Component {\n\n  render() {\n    return(\n      <div className=\"vx-collapse collapse-bordered collapse-icon accordion-icon-rotate\">\n        <Card>\n          <CardHeader id=\"item-1\">\n            <CardTitle className=\"lead collapse-title collapsed\">\n              Collapse Item 1\n            </CardTitle>\n          </CardHeader>\n          <UncontrolledCollapse toggler=\"#item-1\">\n            <CardBody>\n              Lorem ipsum dolor sit amet consectetur adipisicing elit.\n              Repellat, voluptates?Lorem ipsum dolor sit amet.\n            </CardBody>\n          </UncontrolledCollapse>\n        </Card>\n        <Card>\n          <CardHeader id=\"item-2\">\n            <CardTitle className=\"lead collapse-title collapsed\">\n              Collapse Item 2\n            </CardTitle>\n          </CardHeader>\n          <UncontrolledCollapse toggler=\"#item-2\">\n            <CardBody>\n              Lorem ipsum dolor sit amet consectetur adipisicing elit.\n              Repellat, voluptates?Lorem ipsum dolor sit amet.\n            </CardBody>\n          </UncontrolledCollapse>\n        </Card>\n        <Card>\n          <CardHeader id=\"item-3\">\n            <CardTitle className=\"lead collapse-title collapsed\">\n              Collapse Item 3\n            </CardTitle>\n          </CardHeader>\n          <UncontrolledCollapse toggler=\"#item-3\">\n            <CardBody>\n              Lorem ipsum dolor sit amet consectetur adipisicing elit.\n              Repellat, voluptates?Lorem ipsum dolor sit amet.\n            </CardBody>\n          </UncontrolledCollapse>\n        </Card>\n        <Card>\n          <CardHeader id=\"item-4\">\n            <CardTitle className=\"lead collapse-title collapsed\">\n              Collapse Item 4\n            </CardTitle>\n          </CardHeader>\n          <UncontrolledCollapse toggler=\"#item-4\">\n            <CardBody>\n              Lorem ipsum dolor sit amet consectetur adipisicing elit.\n              Repellat, voluptates?Lorem ipsum dolor sit amet.\n            </CardBody>\n          </UncontrolledCollapse>\n        </Card>\n    </div>\n    )\n  }\n}\nexport default CollapseUncontrolled\n  `}\n    </code>\n  </pre>\n)\n\nexport const collapseDefault = (\n  <pre>\n    <code className=\"language-jsx\">\n      {`\nimport React from \"react\"\nimport {Collaspe} from \"reactstrap\"\n\nconst collapseItems = [\n  {\n    id: 0,\n    title: \"Collapse Item 1\",\n    content:\n      \"Pie dragée muffin. Donut cake liquorice marzipan carrot cake topping powder candy. Sugar plum brownie brownie cotton candy.\"\n  },\n  {\n    id: 1,\n    title: \"Collapse Item 2\",\n    content:\n      \"Jelly-o brownie marshmallow soufflé I love jelly beans oat cake. I love gummies chocolate bar marshmallow sugar plum.\"\n  },\n  {\n    id: 2,\n    title: \"Collapse Item 3\",\n    content:\n      \"Pudding lollipop dessert chocolate gingerbread. Cake cupcake bonbon cupcake marshmallow. Gummi bears carrot cake bonbon cake.\"\n  },\n  {\n    id: 3,\n    title: \"Collapse Item 4\",\n    content:\n      \"Brownie sweet carrot cake dragée caramels fruitcake. Gummi bears tootsie roll croissant gingerbread dragée tootsie roll.\"\n  }\n]\n\nclass CollapseDefault extends React.Component {\n\n  state = {\n    collapseItems: []\n  }\n\n  toggleCollapse = collapseID => {\n    let index = this.state.collapseItems.indexOf(collapseID)\n    if (index >= 0) {\n      let items = this.state.collapseItems\n      items.splice(index, index + 1)\n      this.setState({ collapseItems: items })\n    } else {\n      let items = this.state.collapseItems\n      items.push(collapseID)\n      this.setState({ collapseItems: items })\n    }\n  }\n\n  render() {\n\n    const renderCollapse = collapseItems.map(collapseItem => {\n      return (\n        <Card\n          key={collapseItem.id}\n          onClick={() => this.toggleCollapse(collapseItem.id)}\n        >\n          <CardHeader>\n            <CardTitle className=\"lead collapse-title collapsed\">\n              {collapseItem.title}\n            </CardTitle>\n          </CardHeader>\n          <Collapse\n            isOpen={this.state.collapseItems.includes(collapseItem.id)}\n            onEntering={this.onEntering}\n            onEntered={this.onEntered}\n            onExiting={this.onExiting}\n            onExited={this.onExited}\n          >\n            <CardBody>{collapseItem.content}</CardBody>\n          </Collapse>\n        </Card>\n      )\n    })\n\n    return(\n      <div className=\"vx-collapse collapse-bordered collapse-icon accordion-icon-rotate\">\n        {renderCollapse}\n      </div>\n    )\n  }\n}\nexport default CollapseDefault\n  `}\n    </code>\n  </pre>\n)\n","import React from \"react\"\nimport {\n  Collapse,\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  TabContent,\n  TabPane,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\"\nimport classnames from \"classnames\"\nimport { Eye, Code, ChevronDown } from \"react-feather\"\nimport { accordion } from \"./CollapseSourceCode\"\n\nconst collapseItems = [\n  {\n    id: 1,\n    title: \"Accordion Item 1\",\n    content:\n      \"Pie dragée muffin. Donut cake liquorice marzipan carrot cake topping powder candy. Sugar plum brownie brownie cotton candy.\"\n  },\n  {\n    id: 2,\n    title: \"Accordion Item 2\",\n    content:\n      \"Jelly-o brownie marshmallow soufflé I love jelly beans oat cake. I love gummies chocolate bar marshmallow sugar plum.\"\n  },\n  {\n    id: 3,\n    title: \"Accordion Item 3\",\n    content:\n      \"Pudding lollipop dessert chocolate gingerbread. Cake cupcake bonbon cupcake marshmallow. Gummi bears carrot cake bonbon cake.\"\n  },\n  {\n    id: 4,\n    title: \"Accordion Item 4\",\n    content:\n      \"Brownie sweet carrot cake dragée caramels fruitcake. Gummi bears tootsie roll croissant gingerbread dragée tootsie roll.\"\n  }\n]\n\nclass Accordion extends React.Component {\n  state = {\n    activeTab: \"1\",\n    collapseID: \"\",\n    status: \"Closed\"\n  }\n\n  toggleTab = tab => {\n    if (this.state.activeTab !== tab) {\n      this.setState({ activeTab: tab })\n    }\n  }\n\n  toggleCollapse = collapseID => {\n    this.setState(prevState => ({\n      collapseID: prevState.collapseID !== collapseID ? collapseID : \"\"\n    }))\n  }\n  onEntered = id => {\n    if (id === this.state.collapseID) this.setState({ status: \"Opened\" })\n  }\n  onEntering = id => {\n    if (id === this.state.collapseID) this.setState({ status: \"Opening...\" })\n  }\n\n  onExited = id => {\n    if (id === this.state.collapseID) this.setState({ status: \"Closed\" })\n  }\n\n  onExiting = id => {\n    if (id === this.state.collapseID) this.setState({ status: \"Closing...\" })\n  }\n\n  render() {\n    const accordionItems = collapseItems.map(collapseItem => {\n      return (\n        <Card\n          key={collapseItem.id}\n          onClick={() => this.toggleCollapse(collapseItem.id)}\n          className={classnames({\n            \"collapse-collapsed\":\n              this.state.status === \"Closed\" &&\n              this.state.collapseID === collapseItem.id,\n            \"collapse-shown\":\n              this.state.status === \"Opened\" &&\n              this.state.collapseID === collapseItem.id,\n            closing:\n              this.state.status === \"Closing...\" &&\n              this.state.collapseID === collapseItem.id,\n            opening:\n              this.state.status === \"Opening...\" &&\n              this.state.collapseID === collapseItem.id\n          })}\n        >\n          <CardHeader>\n            <CardTitle className=\"lead collapse-title collapsed\">\n              {collapseItem.title}\n            </CardTitle>\n            <ChevronDown size={15} className=\"collapse-icon\" />\n          </CardHeader>\n          <Collapse\n            isOpen={collapseItem.id === this.state.collapseID}\n            onEntering={() => this.onEntering(collapseItem.id)}\n            onEntered={() => this.onEntered(collapseItem.id)}\n            onExiting={() => this.onExiting(collapseItem.id)}\n            onExited={() => this.onExited(collapseItem.id)}\n          >\n            <CardBody>{collapseItem.content}</CardBody>\n          </Collapse>\n        </Card>\n      )\n    })\n\n    return (\n      <React.Fragment>\n        <Card>\n          <CardHeader>\n            <CardTitle>Accordion</CardTitle>\n            <div className=\"views\">\n              <Nav tabs>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"1\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"1\")\n                    }}\n                  >\n                    <Eye size={15} />\n                  </NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"2\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"2\")\n                    }}\n                  >\n                    <Code size={15} />\n                  </NavLink>\n                </NavItem>\n              </Nav>\n            </div>\n          </CardHeader>\n          <CardBody>\n            <p>\n              You may want to open one item at a time for that you can use\n              accordion.\n            </p>\n            <TabContent activeTab={this.state.activeTab}>\n              <TabPane tabId=\"1\">\n                <div className=\"vx-collapse collapse-bordered\">\n                  {accordionItems}\n                </div>\n              </TabPane>\n              <TabPane className=\"component-code\" tabId=\"2\">\n                {accordion}\n              </TabPane>\n            </TabContent>\n          </CardBody>\n        </Card>\n      </React.Fragment>\n    )\n  }\n}\nexport default Accordion\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _transitionStatusToCl;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Transition } from 'react-transition-group';\nimport { mapToCssModules, omit, pick, TransitionTimeouts, TransitionPropTypeKeys, TransitionStatuses, tagPropType } from './utils';\n\nvar propTypes = _objectSpread(_objectSpread({}, Transition.propTypes), {}, {\n  isOpen: PropTypes.bool,\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n  tag: tagPropType,\n  className: PropTypes.node,\n  navbar: PropTypes.bool,\n  cssModule: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object])\n});\n\nvar defaultProps = _objectSpread(_objectSpread({}, Transition.defaultProps), {}, {\n  isOpen: false,\n  appear: false,\n  enter: true,\n  exit: true,\n  tag: 'div',\n  timeout: TransitionTimeouts.Collapse\n});\n\nvar transitionStatusToClassHash = (_transitionStatusToCl = {}, _transitionStatusToCl[TransitionStatuses.ENTERING] = 'collapsing', _transitionStatusToCl[TransitionStatuses.ENTERED] = 'collapse show', _transitionStatusToCl[TransitionStatuses.EXITING] = 'collapsing', _transitionStatusToCl[TransitionStatuses.EXITED] = 'collapse', _transitionStatusToCl);\n\nfunction getTransitionClass(status) {\n  return transitionStatusToClassHash[status] || 'collapse';\n}\n\nfunction getHeight(node) {\n  return node.scrollHeight;\n}\n\nvar Collapse = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(Collapse, _Component);\n\n  function Collapse(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n    _this.state = {\n      height: null\n    };\n    ['onEntering', 'onEntered', 'onExit', 'onExiting', 'onExited'].forEach(function (name) {\n      _this[name] = _this[name].bind(_assertThisInitialized(_this));\n    });\n    return _this;\n  }\n\n  var _proto = Collapse.prototype;\n\n  _proto.onEntering = function onEntering(node, isAppearing) {\n    this.setState({\n      height: getHeight(node)\n    });\n    this.props.onEntering(node, isAppearing);\n  };\n\n  _proto.onEntered = function onEntered(node, isAppearing) {\n    this.setState({\n      height: null\n    });\n    this.props.onEntered(node, isAppearing);\n  };\n\n  _proto.onExit = function onExit(node) {\n    this.setState({\n      height: getHeight(node)\n    });\n    this.props.onExit(node);\n  };\n\n  _proto.onExiting = function onExiting(node) {\n    // getting this variable triggers a reflow\n    var _unused = node.offsetHeight; // eslint-disable-line no-unused-vars\n\n    this.setState({\n      height: 0\n    });\n    this.props.onExiting(node);\n  };\n\n  _proto.onExited = function onExited(node) {\n    this.setState({\n      height: null\n    });\n    this.props.onExited(node);\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props = this.props,\n        Tag = _this$props.tag,\n        isOpen = _this$props.isOpen,\n        className = _this$props.className,\n        navbar = _this$props.navbar,\n        cssModule = _this$props.cssModule,\n        children = _this$props.children,\n        innerRef = _this$props.innerRef,\n        otherProps = _objectWithoutPropertiesLoose(_this$props, [\"tag\", \"isOpen\", \"className\", \"navbar\", \"cssModule\", \"children\", \"innerRef\"]);\n\n    var height = this.state.height;\n    var transitionProps = pick(otherProps, TransitionPropTypeKeys);\n    var childProps = omit(otherProps, TransitionPropTypeKeys);\n    return /*#__PURE__*/React.createElement(Transition, _extends({}, transitionProps, {\n      in: isOpen,\n      onEntering: this.onEntering,\n      onEntered: this.onEntered,\n      onExit: this.onExit,\n      onExiting: this.onExiting,\n      onExited: this.onExited\n    }), function (status) {\n      var collapseClass = getTransitionClass(status);\n      var classes = mapToCssModules(classNames(className, collapseClass, navbar && 'navbar-collapse'), cssModule);\n      var style = height === null ? null : {\n        height: height\n      };\n      return /*#__PURE__*/React.createElement(Tag, _extends({}, childProps, {\n        style: _objectSpread(_objectSpread({}, childProps.style), style),\n        className: classes,\n        ref: _this2.props.innerRef\n      }), children);\n    });\n  };\n\n  return Collapse;\n}(Component);\n\nCollapse.propTypes = propTypes;\nCollapse.defaultProps = defaultProps;\nexport default Collapse;"],"sourceRoot":""}